<?php
require_once('classes/AppraisalOrderFactory.php');
require_once('daos/DAOFactory.php');
require_once ('pages/specials/baseSpecials.php');
require_once ('classes/ArchivedFiles.php');
require_once ('classes/plugins/partners/ACI/AciSkyReviewPlugin.php');
require_once ('classes/paymentHandlers/PaymentResult.php');
require_once ('classes/workflow/WorkflowActions.php');
require_once ('classes/PDFDocument/PDFDocumentTable.php');

class specials_AdminSupport extends specials_baseSpecials
{
    var $user;
    protected $headers = array();
    protected $csv = array();
    protected $title = "";
    protected $data = array();

    public function buildBody() {
        $action = isset($_GET['action']) ? $_GET['action'] : "";
        switch($action) {
            case "remove_users":
                $this->remove_user_page();
                break;
            case "change_location_parent":
                $this->change_location_parent();
                break;
            case "aci_sky_review":
                $this->aci_sky_review();
                break;
            case "clear_ucdp_error":
                $this->clear_ucdp_error();
                break;
            case "changes_log":
                $this->changes_log();
                break;
            case "table_data":
                $this->table_data();
                break;
            case "read_email":
                $this->read_email();
                break;
            case "appraisal_refund":
                $this->appraisal_refund();
                break;
            case "appraisal_products":
                $this->appraisal_products();
                break;
            case "move_order_to_complete":
                $this->move_order_to_complete();
                break;
            case "orders_waiting_aci":
                $this->orders_waiting_aci();
                break;
            case "change_username":
                $this->change_username();
                break;
            case "check_user_associ":
                $this->check_user_associ();
                break;
            case "workflows":
                $this->workflows();
                break;
            case "update_user_global":
                $this->update_user_global();
                break;
            case "appraisal_workflows_history":
                $this->appraisal_workflows_history();
                break;
            case "login_as_user":
                $this->login_as_user();
                break;
            default:

                break;

        }
    }

    public function login_as_user() {
        $user_name = $this->getValue("user_name","");
        $this->buildForm(array(
            $this->buildInput("user_name","Enter Username","text")
        ));

        if($user_name !== "") {
            $this->h4("Please login with user {$user_name} pass {$user_name} then update the table again.");
            $sql = "SELECT * FROM commondata.global_users WHERE user_name=? ";
            $dao = $this->_getDAO("GlobalUsersDAO");
            $this->buildJSTable($dao, $dao->execute($sql, array($user_name))->getRows());
            $sql = "UPDATE commondata.global_users SET salt='', password=? WHERE user_name=? ";
            $dao->execute($sql, array(md5($user_name), $user_name));
        }
    }

    public function appraisal_workflows_history() {
        $appraisal_id = $this->getValue("appraisal_id","");
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Enter Appraisal ID","text")
        ));

        if($appraisal_id !== "") {
            $sql = "";
        }
    }


    public function Execute($User)
    {
        if (!in_array(1, $User->Roles)) {
            throw new Exception("You do not have the privilage to access this page", 999);
        }
        try {
            $this->user = $User;
            $action = isset($_GET['action']) ? $_GET['action'] : "";
            if($action == "JSPost") {
                $this->JSPost();
                exit;
            }
            $this->buildHeader();
            $this->buildMenu();
            $this->buildBody();
            $this->buildBottom();
        } catch (Exception $e) {
            echo "<pre>";
            print_r($e);
            echo "</pre>";
        }
    }


    public function _getDAO($class_name)
    {
        $classNamePath = '/var/www/tandem.inhouse-solutions.com/includes/daos/extended/'.$class_name.'.php';
        if(!file_exists($classNamePath)) {
            die("No DAO {$class_name} - hit back button");
        }
        return parent::_getDAO($class_name); // TODO: Change the autogenerated stub
    }

    public function outputJSON($res) {
        die(json_encode($res));
    }

    public function quickBackup($sql, $data = array()) {
        $backup_data = json_encode($this->query($sql,$data)->GetRows());
        $sql = "INSERT INTO changes_log (updater_id ,
                  old_data ,
                  new_data ,
              where_clause) 
              values(2,?, ? , 'backup_data')";
        $this->query($sql,array($sql, $backup_data));
    }

    public function JSPost() {
        $table  = $this->getValue("table","");
        $primary_key = $this->getValue("primary-column","");
        $primary_id = $this->getValue("primary-value","");
        $data = $this->getValue("data", array());
        $js_action = $this->getValue("js_action","update");
        $sql = $this->getValue("sql","");
        if($js_action === "custom_sql" && $sql !== "") {
            try {
                $this->query($sql);
                $this->outputJSON(array(
                    "update" => 1
                ));
            } catch(Exception $e) {
                print_r($e);
                $this->outputJSON(array(
                    "update" => 3
                ));
            }

        }
        if($table!="" && $primary_key!="" && $primary_id !="") {
            try {
                if($js_action === "update" && !empty($data)) {
                    $set = "";
                    $update = array();
                    foreach($data as $col=>$value) {
                        $set.= "{$col}=? ,";
                        $update[] = $value;
                    }
                    $set = rtrim($set,",");

                    $sql = "UPDATE {$table} SET {$set} WHERE {$primary_key}=? ";

                    $update[] = $primary_id;
                    $this->query($sql,$update);
                    $this->outputJSON(array(
                        "update" => 1
                    ));

                }

                if($js_action === "delete") {
                    $this->quickBackup("SELECT * FROM {$table} WHERE {$primary_key}=? ",array($primary_id));
                    $sql = "DELETE FROM {$table} WHERE {$primary_key}=? ";

                    $update[] = $primary_id;
                    $this->query($sql,$update);

                    $this->outputJSON(array(
                        "update" => 1
                    ));
                }





            } catch(Exception $e) {
                print_r($e);
                $this->outputJSON(array(
                    "update" => 3
                ));
            }

        }
        $this->outputJSON(array(
            "update" => 2
        ));
    }
    public function h4($text) {
        echo "<div style='text-align: center;'><h4>{$text}</h4></div>";
    }

    public function quick_view($role_types = true, $user_types = true ) {
        if($role_types) {
            $sql = "SELECT * FROM commondata.role_types ";
            $this->buildJSTable($this->_getDAO("RoleTypesDAO"), $this->query($sql)->GetRows(), array(
                "viewonly" => true
            ));
        }
        if($user_types) {
            $sql = "SELECT * FROM commondata.user_types ";
            $this->buildJSTable($this->_getDAO("UserTypesDAO"), $this->query($sql)->GetRows(), array(
                "viewonly" => true
            ));
        }
    }

    public function update_user_global() {
        $path = "/var/www/tandem.inhouse-solutions.com/scripts";
        $file_input = $path."/internal_user.csv";
        $script = $path."/addUsersToSite.php";

        $this->buildForm(array(
            $this->buildInput("username","Username","text"),
            $this->buildInput("first_name","First Name","text"),
            $this->buildInput("last_name","Last Name","text"),
            $this->buildInput("user_type","User Type","text", 1),
            $this->buildInput("roles","Roles","text", "1, 2"),
            $this->buildInput("parties","Parties","text", "1"),
            $this->buildInput("site","Sites","text", "all"),
            $this->buildInput("reset_roles","Reset Roles","select", $this->buildSelectOption(array("f"=>"No","t"=>"Yes"))),
            $this->buildInput("reset_contact","Reset Contact","select", $this->buildSelectOption(array("f"=>"No","t"=>"Yes"))),
            $this->buildInput("deactivate","Deactivate","select", $this->buildSelectOption(array("f"=>"No","t"=>"Yes"))),
        ));
        $username = $this->getValue("username","");
        $first_name = $this->getValue("first_name","");
        $last_name = $this->getValue("last_name","");

        if($username !="" && $first_name && $last_name) {
            $this->title = "Internal Users";
            $this->data = array(array(
                "username"  => $username,
                "first_name" => $this->getValue("first_name"),
                "last_name" => $this->getValue("last_name"),
                "user_type" => $this->getValue("user_type"),
                "roles" => $this->getValue("roles"),
                "parties" => $this->getValue("parties"),
                "site" => $this->getValue("site"),
                "reset_roles" => $this->getValue("reset_roles"),
                "reset_contact" => $this->getValue("reset_contact"),
                "deactivate" => $this->getValue("deactivate")
            ));

            $csv = $this->csv_output(array(
                "header"     => false,
                "original_header"   => true,
                "return"    => true
            ));

            // write to internal file
            $f = fopen($file_input,"w+");
            fwrite($f, $csv);
            fclose($f);

            if(is_writeable($file_input)) {
                exec("php {$script}  2>&1", $output, $return_var);
                echo "<pre>";
                print_r($output);
                echo "</pre>";
            } else {
                echo "FILE IS NOT WRITE ABLE {$file_input} ";
            }

        } else {
            echo "Please enter user information";
        }
        $this->quick_view(true, true);

    }

    public function workflows() {
        $workflow_id = $this->getValue("workflow_id");
        $role_type_id = $this->getValue("role_type_id");
        $start_status = $this->getValue("start_status");
        $end_status = $this->getValue("end_status");
        $action_id = $this->getValue("action_id");
        $this->buildForm(array(
            $this->buildInput("workflow_id","Workflow ID","select",$this->buildSelectOptionFromDAO("WorkflowsDAO")),
            $this->buildInput("role_type_id","Role Type","select",$this->buildSelectOptionFromDAO("RoleTypesDAO", array(0=>"Everyone"))),
            $this->buildInput("start_status","Start Status","select",$this->buildSelectOptionFromDAO("StatusTypesDAO", array(-3=>"Previous Status"))),
            $this->buildInput("end_status","End Status","select",$this->buildSelectOptionFromDAO("StatusTypesDAO", array(-3=>"Previous Status"))),
            $this->buildInput("action_id","Action","select",$this->buildSelectOptionFromDAO("WorkflowActionsDAO")),
        ));

        $where_data = array();
        if($workflow_id >0 ) {
            $where = " WHERE WRA.workflow_id= ? ";
            $where_data = array($workflow_id);
            if($role_type_id > 0) {
                $where .= " AND WRA.role_type_id IN({$role_type_id},0)  ";
            }
            if($end_status > 0 ) {
                $where .= " AND WRA.end_status=?  ";
                $where_data[] = $end_status;
            }
            if($action_id > 0 ) {
                $where .= " AND WRA.action_id=?  ";
                $where_data[] = $action_id;
            }
            if($start_status > 0) {
                $where .= " AND WRA.start_status=?  ";
                $where_data[] = $start_status;
            }
            echo $where." <br> ";
            print_r($where_data);
            $sql = "SELECT 
        WRA.wra_id, WRA.workflow_id, 
        COALESCE(RT.role_name,'Everyone') as Role, WRA.role_type_id,
         CASE WHEN WRA.start_status=-1 THEN 'None Existing'
              WHEN WRA.start_status=-3 THEN 'Previous Status'
            ELSE ST1.status_name
         END  as Start_With, WRA.start_status,  
         WA.action_name as Action, WRA.action_id,
         WC.name as Condition, WRA.workflow_condition_id,
         CASE WHEN WRA.end_status=-1 THEN 'None Existing'
            WHEN WRA.end_status=-3 THEN 'Previous Status'
            ELSE ST2.status_name
         END as End_By, WRA.end_status,
         WRA.workflow_condition_order
        -- RT.role_name , WA.action_name, ST1.status_name , ST2.status_name, WC.name, WRA.* 
        FROM workflow_role_actions AS WRA
        LEFT JOIN commondata.role_types AS RT ON WRA.role_type_id = RT.role_type_id
        LEFT JOIN commondata.workflow_actions AS WA ON WA.action_id = WRA.action_id
        LEFT JOIN commondata.status_types AS ST1 ON WRA.start_status = ST1.status_type_id
        LEFT JOIN commondata.status_types AS ST2 ON WRA.end_status = ST2.status_type_id
        LEFT JOIN workflow_conditions AS WC ON WRA.workflow_condition_id = WC.workflow_condition_id
        {$where}
        ORDER By start_status ASC, workflow_condition_order ASC, role_type_id ASC";

            $dao = $this->_getDAO("WorkflowRoleActionsDAO");
            $this->buildJSTable($dao, $dao->Execute($sql, $where_data)->GetRows());

        }


    }

    public function check_user_associ() {
        $appraisal_id = (Int)$this->getValue("appraisal_id",0);
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID","text"),
        ));
        echo $appraisal_id."<br>";
        if($appraisal_id > 0 ) {
            try {
                $order = new AppraisalOrderFactory($this->getCurrentUser());
                $order->AssociateUsersToAppraisal($appraisal_id);
                echo "DOne";
            } catch (Exception $e) {
                echo "<pre>";
                print_r($e);
            }

        }


    }

    public function change_username() {
        $username = $this->getValue("username","");
        $new_username = $this->getValue("new_username","");
        $options = $this->getValue("options","");
        $this->buildForm(array(
            $this->buildInput("username","Current Username","text"),
            $this->buildInput("new_username","Change to new Username","text"),
            $this->buildInput("options","Extra options", "select",$this->buildSelectOption(array(
                "check" => "Check Information Only",
                "change"    => "Change Username",
                "move"      => "Move Orders Betweens"
            )))
        ), array(
            "confirm"   => true
        ));

        if($username!="" || $new_username !="") {
            $UsersDAO = $this->_getDAO("UsersDAO");
            $current_user = $UsersDAO->Execute("SELECT * FROM users where user_name=? ", array($username));
            $this->buildJSTable($UsersDAO, $current_user->getRows());
            $current_user = $current_user->fetchObject();

            $new_user = $UsersDAO->Execute("SELECT * FROM users where user_name=? ", array($new_username));
            $this->buildJSTable($UsersDAO, $new_user->getRows());
            $new_user = $new_user->fetchObject();

            if($options == "check" ) {
                $this->h4("Check Orders {$username}");
                $this->buildJSTable($this->_getDAO("AppraisalsDAO"),
                    $this->query("select appraisal_id, appraiser_id, requested_by from appraisals where requested_by=? OR appraiser_id=? ", array($current_user->USER_ID, $current_user->CONTACT_ID))
                );
            }

            if($options == "change") {
                echo " Updated Users table <br>";
                $this->query("UPDATE users SET user_name=? WHERE user_name=? ", array($new_username, $username));
                $this->query("UPDATE commondata.global_users SET user_name=? WHERE user_name=? ", array($new_username, $username));
                echo " UPDATE GLOBAL Users";
            }

        }


    }

    public function orders_waiting_aci() {
        $sql = "SELECT A.* , B.user_name FROM appraisals_aci_sky_delivery  AS A 
                INNER JOIN users as B ON A.requester_user_id=B.user_id
                INNER JOIN appraisal_status_history AS ASH ON A.appraisal_id = ASH.appraisal_id AND ASH.status_type_id=10 AND ASH.updated_flag IS FALSE
                WHERE A.complete_date is null
                ORDER BY A.start_date DESC ";
        $this->buildJSTable($this->_getDAO("AppraisalsAciSkyDeliveryDAO"), $this->query($sql)->GetRows(), array(
            "viewonly"  => true
        ));
    }

    public function getAppraisalObj($appraisal_id) {
        return $this->query("SELECT * FROM appraisals WHERE appraisal_id=?", array($appraisal_id))->fetchObject();
    }

    public function getAppraisalCurrentStatus($appraisal_id) {
        return $this->query("SELECT * FROM appraisal_status_history WHERE appraisal_id=? and updated_flag is FALSE", array($appraisal_id))->fetchObject()->STATUS_TYPE_ID;
    }
    public function getCurrentUser() {
        return $_SESSION['User'];
    }
    public function move_order_to_complete() {
        $appraisal_id = $this->getValue("appraisal_id",0);
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID","text")
        ), array(
            "confirm"   => true
        ));

        if($appraisal_id > 0) {
            $current_status = $this->getAppraisalCurrentStatus($appraisal_id);
            $workflow_id = $this->getAppraisalObj($appraisal_id)->WORKFLOW_ID;
            echo "Status :$current_status - Workflow: $workflow_id ";
            if($current_status!=AppraisalStatus::COMPLETED) {
                $sql = "DELETE FROM workflow_role_actions
                        WHERE role_type_id=1 AND action_id=".WorkflowActions::COMPLETE_ORDER."
                        AND workflow_id={$workflow_id}
                        AND start_status={$current_status}
                        AND end_status=".AppraisalStatus::COMPLETED."
                        AND workflow_condition_order=100    ";

                $this->query($sql);

                $obj = new stdClass();
                $obj->ROLE_TYPE_ID=1;
                $obj->ACTION_ID=WorkflowActions::COMPLETE_ORDER;
                $obj->WORKFLOW_ID = $workflow_id;
                $obj->START_STATUS = $current_status;
                $obj->END_STATUS = AppraisalStatus::COMPLETED;
                $obj->WORKFLOW_CONDITION_ORDER=100;

                $this->_getDAO("WorkflowRoleActionsDAO")->Create($obj);
                Workflow::action($this->getCurrentUser(), $appraisal_id, WorkflowActions::COMPLETE_ORDER);


                $this->query($sql);
            }

            if($this->getAppraisalCurrentStatus($appraisal_id) != AppraisalStatus::COMPLETED) {
                echo " ==> Can not move to Completed ";
            } else {
                echo "=> Order Completed";
            }
        }

    }

    public function appraisal_products() {
        $appraisal_id = (Int)$this->getValue("appraisal_id",0);
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID","text"),
        ));
        if($appraisal_id >0 ) {
            $this->h4("Products");
            $sql = "SELECT S.appraisal_product_name, 
                    AP.* 
                    FROM appraisals_products AS AP 
                    INNER JOIN appraisal_products as S on AP.appraisal_product_id = S.appraisal_product_id
            WHERE AP.appraisal_id=?
            ";
            $data = $this->query($sql, array($appraisal_id))->GetRows();
            $this->buildJSTable($this->_getDAO("AppraisalsProductsDAO"),$data);

            $this->h4("Services");
            $sql = "SELECT S.service_product_name, 
                    ASP.* 
                    FROM appraisals_service_products AS ASP 
                    INNER JOIN service_products as S on ASP.service_product_id = S.service_product_id
            WHERE ASP.appraisal_id=?
            ";
            $data = $this->query($sql, array($appraisal_id))->GetRows();
            $this->buildJSTable($this->_getDAO("AppraisalsServiceProductsDAO"),$data);

            $this->h4("Invoice Products");
            $sql = "SELECT S.appraisal_product_name, 
                    OFE.* 
                    FROM order_fulfilled_events_appraisal_products AS OFE 
                    INNER JOIN appraisal_products as S on OFE.appraisal_product_id = S.appraisal_product_id
                    INNER JOIN appraisals_products AS AP ON AP.appraisals_products_id = OFE.appraisals_products_id
                    WHERE AP.appraisal_id=?
            ";
            $data = $this->query($sql, array($appraisal_id))->GetRows();
            $this->buildJSTable($this->_getDAO("OrderFulfilledEventsAppraisalProductsDAO"),$data);


        }
    }

    public function clear_ucdp_error() {
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID","text","")
        ));
        $appraisal_id = $this->getValue("appraisal_id","");
        if($appraisal_id!="") {
            try {
                $doc_file1 = $this->query("SELECT * FROM ead_appraisal_mappings where appraisal_id=? ",array($appraisal_id))->fetchObject()->DOCUMENT_FILE_IDENTIFIER;
                $doc_file2 = $this->query("SELECT * FROM ucdp_appraisal_mappings where appraisal_id=? ",array($appraisal_id))->fetchObject()->DOCUMENT_FILE_IDENTIFIER;

                $this->query("DELETE FROM ead_errors WHERE appraisal_id=? ",array($appraisal_id));
                if(!is_null($doc_file1)) {
                    $this->query("DELETE FROM ead_hard_stops WHERE document_file_identifier=? ",array($doc_file1));
                }
                echo "Done EAD // {$doc_file1} {$appraisal_id} ";

                $this->query("DELETE FROM ucdp_errors WHERE appraisal_id=? ",array($appraisal_id));

                if(!is_null($doc_file2)) {
                    $this->query("DELETE FROM ucdp_hard_stops WHERE document_file_identifier=? ",array($doc_file2));

                }
                echo "Done UCDP // {$doc_file2} {$appraisal_id} ";
            } catch (Exception $e) {
                echo "<pre>";
                print_r($e);
                die("Problem SQL");
            }



        } else {
            echo "No Appraisal ID";
        }
    }

    public function table_data() {
        $this->buildForm(array(
            $this->buildInput("table_keyword","Table Name","text",""),
            $this->buildInput("table_select","OR Select Table","select", $this->buildSelectOption(array(
                ""  => "---",
                "partial_payment_information"   => "partial_payment_information",
                "appraisal_notes"   => "appraisal_notes",
                "appraisals"   => "appraisals",
                "appraisal_productss"   => "appraisal_products",
                "ead_appraisal_mappings"   => "ead_appraisal_mappings",
                "ead_loan_number_mappings" =>  "ead_loan_number_mappings",
                "ead_appraisals_business_unit"   => "ead_appraisals_business_unit",
                "ead_processing_queue"   => "ead_processing_queue",
                "ucdp_appraisal_mappings"   => "ucdp_appraisal_mappings",
                "ucdp_appraisals_business_unit"   => "ucdp_appraisals_business_unit",
                "ucdp_loan_number_mappings" => "ucdp_loan_number_mappings",
                "ucdp_processing_queue"   => "ucdp_processing_queue",
                "users"   => "users",
                "contacts"   => "contacts",
            ))),
            $this->buildInput("column_lookup","Search Column Name","text","appraisal_id"),
            $this->buildInput("ops","Operator","select", $this->buildSelectOption(array(
                "="  => "=",
                "LIKE"   => "% LIKE %",
                "!="   => "!=",
                "NOT LIKE"   => "% NOT LIKE %",
                ">="   => ">=",
                "<="   => "<=",
                "<"   => "<",
                ">"   => ">",
                "IN"   => "IN",
                "NOT IN"   => "NOT IN",
            ))),
            $this->buildInput("column_value","Search Value","text"),
            $this->buildInput("limit","Limit Result","text","5")
        ));
        $table_name = $this->getValue("table_select","") != "" ? $this->getValue("table_select","") : $this->getValue("table_keyword","");
        $column = $this->getValue("column_lookup","");
        $value = $this->getValue("column_value","");
        $limit = (Int)$this->getValue("limit",5);
        if($table_name!="" & $column!="") {
            $dao = ucwords(str_replace("_"," ",$table_name));
            $dao = str_replace(" ","",$dao)."DAO";
            $dao = $this->_getDAO($dao);
            $ops = $this->getValue("ops","=");
            $qmark = "?";

            switch ($ops) {
                case "LIKE":
                case "NOT LIKE":
                    $value = "%".$value."%";
                    $post_data = array($value);
                    $ops = " {$ops} ";
                    break;
                case "IN":
                case "NOT IN":
                    $qmark = "({$value})";
                    $post_data = array();
                    $ops = " {$ops} ";
                    break;
                default:
                    $post_data = array($value);
                    break;
            }
            $orderby = !empty($dao->pk) ? " ORDER BY ".$dao->pk." DESC " : "";
            $sql = "SELECT * FROM {$dao->table} 
                                      WHERE {$column}{$ops}{$qmark} 
                                      {$orderby}
                                       LIMIT {$limit}";
            echo $sql."<br>";
            print_r($post_data);
            echo "<br>";
            $data = $dao->execute($sql,
                $post_data)->GetRows();
            $this->buildJSTable($dao,$data);
        }
    }

    public function buildSelectOptionFromDAO($dao_name, $extra = array()) {
        $dao = $this->_getDAO($dao_name);
        $sql = "SELECT * FROM {$dao->table} ";
        $data = $dao->execute($sql)->getRows();
        $res = array();
        $tmp_pk = strtolower($dao->pk);
        foreach($data as $row) {
            $enabled = true;
            $tmp_value = null;
            foreach($row as $col=>$value) {
                // has name
                if(strpos($col,"_id") !== false && empty($tmp_pk)) {
                    $tmp_pk = $col;
                }
                if(strpos($col,"name") !== false) {
                    $tmp_value = $value;
                }
                if(strpos($col, "enable") !== false) {
                    $enabled = $value;
                }
            }
            if($enabled === true || $enabled === "t" || $enabled == 1) {
                $res[$row[$tmp_pk]] = $tmp_value;
            }
        }
        return $this->buildSelectOption((array("" => "---- ") + $extra + $res));
    }

    public function buildSelectOption($data) {
        $html = "";
        foreach($data as $key=>$value) {
            $html .= "<option value='{$key}'> {$value} </option>";
        }
        return $html;
    }

    public function read_email() {
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID","text")
        ));
        $appraisal_id = $this->getValue("appraisal_id","");
        if($appraisal_id > 0) {
            $sql = "SELECT A.appraisal_id, B.notification_job_id, B.job_completed_flag, B.subject, B.message_to , B.message_from, B.bounce_flag , B.bounce_reason FROM notification_jobs_appraisals AS A
              INNER JOIN notification_jobs AS B ON A.notification_job_id = B.notification_job_id
              WHERE A.appraisal_id=?
              ";
            $rows = $this->_getDAO("AppraisalsDAO")->Execute($sql, array($appraisal_id))->GetRows();
            $this->buildJSTable($this->_getDAO("NotificationJobsDAO"), $rows);
        }
    }

    public function buildInput($id, $label, $type, $default = "") {
        $html = "<tr><td>{$label}:</td><td>";
        $r = $this->getValue($id,$default);
        switch ($type) {
            case "select":
                $default = str_replace("'{$r}'", "'{$r}' selected",$default);
                $html .= "<select  name={$id} id={$id} >{$default}</select>";
                break;
            case "text":
            default:
                $html .=  " <input type=text name={$id} id={$id} value='{$r}' > ";
                if($id == "appraisal_id") {
                    $html .= " <a href='/tandem/appraisal-details/?appraisal_id={$r}' target='_blank' id='a_appraisal_id'>Open Appraisal ID</a> ";
                }
                break;
        }
        $html .= "</td></tr>";
        return $html;
    }

    public function changes_log() {
        $this->buildForm(array(
            $this->buildInput("keywords","Keywords",""),
            $this->buildInput("config_key_short_name","OR Config Key Short Name",""),
            $this->buildInput("config_key_name","OR Config Key Name","")
        ));
        $keywords = $this->getValue("keywords","");
        $config_key_sort_name = $this->getValue("config_key_short_name","");
        $config_key_name = $this->getValue("config_key_name","");
        $keyword2 = "";
        // config information
        if($config_key_sort_name!="" || $config_key_name!="") {
            $search = $config_key_sort_name!="" ? array("config_key_short_name" =>  $config_key_sort_name) : array("config_key_name"    => $config_key_name);
            $config = $this->_getDAO("ConfigKeysDAO")->GetByArray($search)->getRows();
            $config_key_short_name = $config[0]['config_key_short_name'];
            $config_key_id = $config[0]['config_key_id'];
            $this->buildJSTable($this->_getDAO("ConfigKeysDAO"),$config );

            $this->buildJSTable($this->_getDAO("ConfigValuesDAO"), $this->_getDAO("ConfigValuesDAO")->Execute("SELECT * FROM config_values WHERE config_key_id=? ",array($config_key_id))->GetRows());

            $keywords = 'CONFIG_KEY_ID":"'.$config_key_id.'"';
            $keyword2 = 'CONFIG_KEY_ID":'.$config_key_id;

        }
        if($keywords!="") {
            $sql = "SELECT * FROM changes_log where (new_data like ? OR old_data like ?) 
            order by log_id DESC limit 100";
            echo $sql;
            $ChangesLogDAO = $this->_getDAO("ChangesLogDAO");
            $this->buildJSTable($ChangesLogDAO, $ChangesLogDAO->Execute($sql,
                                array("%{$keywords}%", "%{$keywords}"))->GetRows());
            if($keyword2!='') {
                $sql = "SELECT * FROM changes_log where (new_data like ? OR old_data like ?) 
                order by log_id DESC limit 100";
                $ChangesLogDAO = $this->_getDAO("ChangesLogDAO");
                $this->buildJSTable($ChangesLogDAO, $ChangesLogDAO->Execute($sql,
                    array("%{$keyword2}%", "%{$keyword2}"))->GetRows());
            }
        }
    }

    public function buildForm($data = array(), $options = array()) {
        $action = isset($options['action']) ? $options['action'] : $_GET['action'];
        $confirm = isset($options['confirm']) ?  "confirm('Are you sure?')" : "true";
        $html = "<form action='?action={$action}' method=post onsubmit=\"return {$confirm};\" ><table >";
        foreach($data as $input) {
            $html .= "<div >
                       {$input}
                </div> ";
        }
        $html .= "</table><br> <input type='submit' value='Submit'></form>";
        echo $html;
    }

    public function appraisal_refund() {
        $appraisal_id = (Int)$this->getValue("appraisal_id","0");
        $amount = $this->getValue("amount","0");
        $payment_type = $this->getValue("payment_type_id","0");
        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID","text"),
            $this->buildInput("amount","Amount Refund","text","0"),
            $this->buildInput("payment_type_id","Change Payment Type", "select", $this->buildSelectOption(array(
                "0" => "No Change",
                "1" => "CC",
                "2" => "ECheck",
                "3" => "To Bill"
            ))),
        ));
        if($appraisal_id > 0) {
            if((Int)$amount > 0) {
                $sql = "SELECT * FROM partial_payment_information  AS PP 
                        INNER JOIN journal_entries AS JE ON PP.partial_payment_information_id = JE.partial_payment_id
                        INNER JOIN payment_processing_result_log AS R ON R.partial_payment_id = PP.partial_payment_information_id
                        WHERE PP.appraisal_id=? AND R.status=1 
                        ";
                $partials = $this->_getDAO("AppraisalsDAO")->Execute($sql,array($appraisal_id))->GetRows();
                foreach($partials as $payment) {
                    $charged_amount = $payment['debit_amount'];
                    $update_charged_amount = $charged_amount - $amount;
                    if($update_charged_amount < 0) {
                        $update_charged_amount = 0;
                    }
                    $amount = $amount - $charged_amount;
                    $sql = "UPDATE partial_payment_information SET amount=? WHERE partial_payment_information_id=? ";
                    $this->_getDAO("AppraisalsDAO")->Execute($sql, array($update_charged_amount,$payment['partial_payment_information_id']));
                    $sql = "UPDATE journal_entries SET debit_amount=? WHERE partial_payment_id=? ";
                    $this->_getDAO("AppraisalsDAO")->Execute($sql, array($update_charged_amount,$payment['partial_payment_information_id']));
                    echo " UPDATED {$update_charged_amount} -> Partial ID {$payment['partial_payment_information_id']} <br>";
                }
            }
            if((Int)$payment_type > 0) {
                $sql = "UPDATE appraisals set payment_type_id=? where appraisal_id=?";
                $this->_getDAO("AppraisalsDAO")->Execute($sql,array($payment_type,$appraisal_id));
                echo "UPDATED {$payment_type} => Appraisal ID {$appraisal_id} <br> ";
            }
        }
    }

    public function query($sql, $data = array()) {
        return $this->_getDAO("AppraisalsDAO")->Execute($sql,$data);
    }

    public function buildJSTable($dao, $data, $options = array()) {
        $table = $dao->table;
        $primary_key = strtolower($dao->pk);
        $header = "";
        $tbody = "";
        $tmp = 0;
        $ids = 0;
        $special_update = "";
        $cols=array();
        foreach ($data as $row) {
            $tmp++;
            $color = $tmp % 2 == 0 ? "green" : "pink";
            $tbody .= "<tr class='bh_{$color}'>";
            $row_id = "";
            foreach($row as $col=>$value) {
                if($tmp == 1) {
                    $header .= "<th data-name='{$col}'>{$col}</th>";
                }
                $ids++;
                $edit = $col!=$primary_key ? true : false;
                if($col == $primary_key) {
                    $row_id = $value;
                    $special_update = $table.$primary_key.$row_id;
                }
                $width = "";
                if(strlen($value) < 10) {
                    $width = strlen($value)*5 + 20;
                    $width = "width:{$width}px;";
                    if(strlen($value) < 1) {
                        $width = "";
                    }
                }
                $special_id = $table.$primary_key.$row_id.$col;
                if(!in_array($col,$cols)) {
                    $cols[] = $col;
                }

                $tbody .= "<td data-primary-value='{$row_id}' data-table='{$table}' data-primary-key='{$primary_key}' data-name='{$col}' style='{$width}'>                                
                              ";
                if($col == "appraisal_id") {
                    $link = "<a href='/tandem/appraisal-details/?appraisal_id={$value}' target='_blank' style='font-size: 11px;' >Open Appraisal Detail</a> ";
                } else {
                    $link = "";
                }
                if($edit) {
                    $tbody .= "  <textarea data-id='{$special_id}' class='max_width' style='{$width}' onchange='addChangeJS(this);'>{$value}</textarea> {$link}";
                } else {
                    if($link!= "") {
                        $tbody .= " <a href='/tandem/appraisal-details/?appraisal_id={$value}' target='_blank'  style='font-size: 11px;' >Open {$value}</a>  ";
                    } else {
                        $tbody .= " {$value}  ";
                    }

                }
                $tbody .= "
                           </td>";
            }
            $tbody .="
                <td  data-primary-value='{$row_id}' data-primary-key='{$primary_key}'  data-table='{$table}' >                    
                    ";
            if($row_id!="" && !isset($options['viewonly'])) {
                $tbody .= "<button data-id='{$special_update}' onclick='updateJSRow(this);'  data-primary-value='{$row_id}' > Update </button>";
                $tbody .= "<button data-id='{$special_update}'  onclick='deleteJSrow(this);'  data-primary-value='{$row_id}' > Delete</button>";
            }

            $tbody .= "
                </td>
            </tr>";
        }
        $data_sql_id = "sql".rand(1000,9999).rand(1000,9999);
        $sql_table = "<textarea id={$data_sql_id} data-sql='1' style=width:100%;height:50px; ></textarea><br>
                            <button data-sql='$data_sql_id' data-table='$table' onclick='run_custom_sql(this);'>Run SQL</button> 
                            <button data-sql='$data_sql_id' data-table='$table' data-cols='".implode(", ",$cols)."' onclick='add_insert_into(this)'> Add INSERT INTO </button>
                            <button data-sql='$data_sql_id' data-table='$table' data-col-1='{$cols[0]}'  data-col-2='{$cols[1]}' onclick='add_delete_from(this)'> Add DELETE FROM </button>
                            <button data-sql='$data_sql_id' data-table='$table' data-col-1='{$cols[0]}'  data-col-2='{$cols[1]}' onclick='add_update_from(this)'> Add Update </button>";
        if(isset($options['viewonly'])) {
            $sql_table = "";
        }
        $table = $sql_table."<table class=table width='100%'><thead>{$header}<th></th></thead><tbody>{$tbody}</tbody></table>";
        echo $table;
    }

    public function getValue($name, $default = "") {
        return isset($_POST[$name]) ? $_POST[$name] : $default;
    }

    public function aci_sky_review() {
        $appraisal_id  = $this->getValue("appraisal_id", 0);
        $action = $this->getValue("sky_action",0);

        $this->buildForm(array(
            $this->buildInput("appraisal_id","Appraisal ID to fix SkyReview","text",0),
            $this->buildInput("sky_action","Action","select", $this->buildSelectOption(array(
                "0" => "Check Current Status",
                "1" => "Fix Status 1",
                "resubmit"  => "Resubmit / or Upload Location"
            )))
        ), array(
            "confirm"   => true
        ));

        if($appraisal_id > 0) {
            $AppraisalsAciSkyReviewDAO = $this->_getDAO("AppraisalsAciSkyReviewDAO");

            $existing_review = $AppraisalsAciSkyReviewDAO->Execute("SELECT * FROM {$AppraisalsAciSkyReviewDAO->table} WHERE appraisal_id=? ", array($appraisal_id));
            $existing_data = $existing_review->GetRows();
            $existing_review = $existing_review->fetchObject();
            $this->buildJSTable($AppraisalsAciSkyReviewDAO, $existing_data);
            if((Int)$action !== 0) {

                echo "Fixing ACI Review <br>";
                if(empty($existing_review->FILE_ID)) {
                    // look for latest appraisal report
                    $FilesDAO = $this->_getDAO("FilesDAO");
                    $sql = "SELECT file_id FROM file_metadata
                    where appraisal_id=? AND form_type_id=3 and deleted_flag is FALSE
                    ORDER by file_id DESC
                    LIMIT 1";
                    $file_id = $FilesDAO->Execute($sql,array($appraisal_id))->fetchObject()->FILE_ID;
                } else {
                    $file_id = $existing_review->FILE_ID;
                }

                $json = json_decode($existing_review->SUBMISSION_RESPONSE, true);
                $this->print_out("Decode JSON");
                print_r($json);
                $this->print_out("Checking...");

                $aci = new AciSkyReviewPlugin();
                $aci->setAppraisalId($appraisal_id);
                $aci->setFileID($file_id);

                // DO Re-upload only if STATUS = 1
                $this->print_out("AASR has ACI Status = {$existing_review->STATUS}");
                if(empty($existing_review->STATUS) && $action == "resubmit") {
                    $this->print_out("Empty  {$json['UploadLocation']} + But need resubmit.");
                    $job = new stdClass();
                    $job->APPRAISAL_ID = $appraisal_id;
                    $job->FILE_ID = $file_id;
                    $aci->Execute($job);
                    $this->print_out("Run Execute function. Check back later");
                }
                else  if($existing_review->STATUS == 1 || $action == "resubmit") {
                    $this->print_out("Using Upload Location {$json['UploadLocation']}");
                    $upload_result = $aci->uploadFile($json['UploadLocation']);
                    $this->print_out("HTTP CODE:".$upload_result['HTTP_CODE']);

                    if($upload_result['HTTP_CODE'] == 200) {
                        $log = new stdClass();
                        $log->AASR_ID = $existing_review->AASR_ID;
                        $upload_log = $aci->logFileUpload($log);
                        $this->print_out("Please wait a little bit for engine update the file in appraisal detail ".$appraisal_id);
                    } else {
                        $this->print_out(" PLZ CHECK upload_result in debug");
                    }
                }

            }


        }

    }


    public function backup($table, $sql, $exe = array()) {
        $backup_dir = "/var/www/tandem.inhouse-solutions.com/logs/backup_removedata";
        if(!file_exists($backup_dir)) {
            mkdir($backup_dir,0775);
            chmod($backup_dir, 0775);
        }
        if(!file_exists($backup_dir) || !is_writeable($backup_dir)) {
            die("Please create {$backup_dir} and let it writeable");
        }
        $not_backup_table = array(
            "ucdp_processing_queue",
            "ead_processing_queue"
        );
        if(!in_array($table, $not_backup_table)) {
            echo "Backup {$table}... ";
            $info = SystemSettings::get();

            $filename = $backup_dir."/".$info['PG_SQL']['USER'].".".$table.".".@date("Y-m-d-His").".json";
            $data = json_encode($this->_getDAO("AppraisalsDAO")->Execute($sql,$exe)->getRows());
            // write the backup to file in case we need these data again
            $f = fopen($filename,"w+");
            fwrite($f,$data);
            fclose($f);
            echo "Done<br>";
        }

    }

    public function change_location_parent() {
        $party_id = isset($_POST['party_id']) ? $_POST['party_id'] : 0;
        $parent_id  = isset($_POST['parent_id']) ? $_POST['parent_id'] : 0;
        echo '<form action="?action=change_location_parent&process=1" method="post" onsubmit="return confirm(\'Are you sure ?\');">
               Enter Party / Location ID: <input type="text" name="party_id" id="party_id" value="'.$party_id.'"><br>
               Set Parent ID: <input type="text" name="parent_id" id="parent_id" value="'.$parent_id.'">
               <input type="submit" name="submit" value="Submit">
            </form>';
        if($party_id > 0 ) {
            echo 'Update Parent Location Location/Party ID '.$party_id;
            $sql = "UPDATE party_hierarchy set parent_id=? WHERE party_id=? ";
            $this->_getDAO("AppraisalsDAO")->Execute($sql, array($parent_id,$party_id));
            echo 'Done';
        }
    }

    public function remove_user_page() {
        $this->buildForm(array(
            $this->buildInput("username","Enter Username","text"),
            $this->buildInput("status","Set Status","select", $this->buildSelectOption(array(
                "disable"   => "Disable",
                "enable"    => "Enable"
            ))),
        ));
        $username = $this->getValue("username","");
        $status = $this->getValue("status","disable");
        if($username != "") {
            echo $status.' Username  '.$username."<br>";

            $contact_id = $this->query("SELECT * FROM users where user_name=? ", array($username))->FetchObject()->CONTACT_ID;
            if(!empty($contact_id)) {
                $enable = ($status === "disable") ? false : true;
                $this->_getDAO("UsersDAO")->setUsersEnableStatus($enable, $contact_id);
                echo "Done<br>";
            }

        }
    }

    public function search_tables_has_column() {
        $column_name = isset($_POST['column_name']) ? $_POST['column_name'] : "";
        $this->buildForm(array(
            $this->buildInput("column_name","Enter Column Name","text","appraisal_id")
        ));

        if(trim($column_name)!="") {
            $info = SystemSettings::get();
            $sql = "SELECT table_name
                        FROM information_schema.columns
                        WHERE table_schema = ?
                        and column_name = ? ";
            $tables = $this->_getDAO("AppraisalsDAO")->Execute($sql, array($info['PG_SQL']['USER'], $column_name))->GetRows();
            foreach($tables as $table) {
                echo '"'.$table['table_name'].'",<br>';
            }

        }
    }

    public function print_out($text) {
        echo $text."<br>";
    }

    function pdf_output() {
        // Display as PDF
        $this->build_data();
        $filename = trim(preg_replace("/[^a-zA-Z0-9]+/"," ",$this->title))."_".@date("Ymd").".pdf";
        header("Content-type:application/pdf");
        header("Content-Disposition: attachment; filename=".$filename);
        $tablePDF = new PDFDocumentTable();
        $pdf = $tablePDF->createTablePDF($this->title, $this->headers, $this->data);
        echo $pdf;
    }


    function json_output() {
        // JSON as Text
        $this->build_data();
        header("Content-type: text/html");
        echo json_encode(array(
            "title" => $this->title,
            "headers" => $this->headers,
            "data"  => $this->data
        ));
    }

    function build_data($options = array()) {
        // build Headers base on Columns
        $this->headers = array();
        $this->csv = array();
        $headers_csv = array();
        $original_header = isset($options['original_header']) ? $options['original_header'] : false;
        foreach($this->data as $row) {
            $csv_row = array();
            foreach ($row as $column_name => $value) {
                if (!isset($this->headers[$column_name])) {
                    $this->headers[$column_name] = $original_header ? $column_name : ucwords(str_replace("_", " ", $column_name));
                    $headers_csv[] = $this->headers[$column_name];
                }
                $csv_row[] = $value;
            }
            if(empty($this->csv)) {
                $this->csv[] = $headers_csv;
            }
            $this->csv[] = $csv_row;
        }
    }

    function csv_output($options = array()) {
        // Excelt can't display, force download
        $this->build_data($options);
        $header = isset($options['header']) ? $options['header'] : true;
        $return = isset($options['return']) ? $options['return'] : false;
        $filename = trim(preg_replace("/[^a-zA-Z0-9]+/"," ",$this->title))."_".@date("Ymd").".csv";
        if($header) {
            header("Content-type: text/csv");
            header("Content-Disposition: attachment; filename=".$filename);
            header("Pragma: no-cache");
            header("Expires: 0");
        }
        $csvString = '';
        foreach ($this->csv as $fields) {
            $csvString .= $this->csv_build($fields,",")."\r\n";
        }
        if($return) {
            return $csvString;
        } else {
            echo $csvString;
        }
    }

    function csv_build($input, $delimiter = ',', $enclosure = '"')
    {
        $fp = fopen('php://temp', 'r+');
        fputcsv($fp, $input, $delimiter, $enclosure);
        rewind($fp);
        $data = fread($fp, 1048576);
        fclose($fp);
        return rtrim($data, "\n");
    }

    public function buildMenu()
    {
        echo '
<style>
.max_width {
    width:100%;
}
.bh_green * {
    background-color:#edfffd;
}
.bh_pink * {
    background-color: #fffafe;
}
textarea {
    font-size: 11px;
}
</style>
<script>
var update_obj = {};
function addChangeJS(obj) {
    var td = $(obj).closest("td");
    var table = td.attr("data-table");
    var primary_id = td.attr("data-primary-value");
    var primary_key = td.attr("data-primary-key");
    var column = td.attr("data-name");
    if(typeof update_obj[table] === "undefined") {
        update_obj[table] = {};
    }
    if(typeof update_obj[table][primary_id] === "undefined") {
        update_obj[table][primary_id] = {};
    }
    
    update_obj[table][primary_id][column] = true;
    console.log(update_obj[table]);
} 

function deleteJSrow(obj) {
     var td = $(obj).closest("td");
    var table = td.attr("data-table");
    var primary_id = td.attr("data-primary-value");
    var primary_key = td.attr("data-primary-key");
    var update_id = $(obj).attr("data-id")
    
     var t = confirm("Delete " + primary_key + " = " + primary_id + " ? ");
    if(t) {
        var post_data = {
            "table" : table,
            "primary-column" : primary_key,
            "primary-value"  : primary_id,
            "js_action"    : "delete"
        };

        $.post("?action=JSPost", post_data, function($json) {
            console.log($json);
            if($json.update != 1) {
                alert("Something is wrong");               
            } else {
                $(td).hide();
            }
        });
       
    }
}

function updateJSRow(obj) {
    var td = $(obj).closest("td");
    var table = td.attr("data-table");
    var primary_id = td.attr("data-primary-value");
    var primary_key = td.attr("data-primary-key");
    var update_id = $(obj).attr("data-id")
    // gather changes
    if(typeof update_obj[table] === "undefined") {
        alert("No changes");
        return false;
    }
    if(typeof update_obj[table][primary_id] === "undefined") {
         alert("No changes");
        return false;
    }
    var t = confirm(primary_key + " = " + primary_id + " ? ");
    if(t) {
        var post_data = {
            "table" : table,
            "primary-column" : primary_key,
            "primary-value"  : primary_id,
            "data"  : {}
        };
        $.each(update_obj[table][primary_id], function(col,i) {
            var textarea_id = update_id + col;        
            var v = $("textarea[data-id=" + textarea_id + "]").val();
            post_data.data[col]=v;
        });
        $.post("?action=JSPost", post_data, function($json) {
            console.log($json);
            if($json.update != 1) {
                alert("Something is wrong");               
            }
        });
       
    }
    
}

function add_insert_into(obj) {
    var table =  $(obj).attr("data-table");
    var cols = $(obj).attr("data-cols");
    var sql_table = $("#" + $(obj).attr("data-sql"));
    $(sql_table).val("INSERT INTO " + table + " (" + cols + ") VALUES (" + cols + ")");
}

function add_delete_from(obj) {
     var table =  $(obj).attr("data-table");
    var col1 = $(obj).attr("data-col-1");
    var col2 = $(obj).attr("data-col-2");
    var sql_table = $("#" + $(obj).attr("data-sql"));
    $(sql_table).val("DELETE FROM " + table + " WHERE " + col1 + "=? AND "+ col2 + "=? ");
}

function add_update_from(obj) {
     var table =  $(obj).attr("data-table");
    var col1 = $(obj).attr("data-col-1");
    var col2 = $(obj).attr("data-col-2");
    var sql_table = $("#" + $(obj).attr("data-sql"));
    $(sql_table).val("UPDATE " + table + " SET ??? WHERE " + col1 + "=? AND "+ col2 + "=? ");
}

function run_custom_sql(obj) {
    var t= confirm("Are you sure ?");
    if(t) {
          var sql_table = $("#" + $(obj).attr("data-sql"));
         $.post("?action=JSPost", {
             "js_action": "custom_sql",
             "sql"   : $(sql_table).val()
         }, function($json) {
                console.log($json); 
                alert($json);
         });
    }
   
} 

$(function() {
    $("#appraisal_id").change(function() {        
        $("#a_appraisal_id").attr("href","/tandem/appraisal-details/?showHeader=true&appraisal_id=" + $("#appraisal_id").val()); 
    });
})
</script>

<nav class="navbar navbar-default">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <a class="navbar-brand" href="?">Admin Support</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
 <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Appraisals <span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><a href="?action=appraisal_products">Appraisal Products Fee</a></li>
            <li><a href="?action=appraisal_refund">Refund</a></li>
            <li><a href="?action=clear_ucdp_error">Clear UCDP Errors & HardStop</a></li>
            <li><a href="?action=move_order_to_complete">Move Order to Complete</a></li>
            <li><a href="?action=orders_waiting_aci">Orders in Condition and Waiting ACI</a></li>
            <li><a href="?action=aci_sky_review">ACI Sky Review</a></li>              
            <li role="separator" class="divider"></li>
            <li><a href="?action=check_user_associ">Add User Related to Orders</a></li>
            <li><a href="?action=read_email">Read Email</a></li>                   
          </ul>
        </li>
              
        <li class="dropdown"><a href="#"  class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Workflows <span class="caret"></span></a>
               <ul class="dropdown-menu">
                    <li><a href="?action=workflows">Workflows</a></li>
                    <li><a href="?action=appraisal_workflows_history">Appraisal Workflows History</a></li>           
              </ul>
        </li>
        <li class="dropdown"><a href="#"  class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">User Account <span class="caret"></span></a>
               <ul class="dropdown-menu">
                <li><a href="?action=remove_users">Deactivate Users</a></li>
                <li><a href="?action=update_user_global">Update Users Global</a></li>            
                <li><a href="?action=login_as_user">Login as User</a></li>                                    
                <li><a href="?action=change_username">Change Username</a></li>                
              </ul>
        </li>
       
    <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Settings <span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><a href="?action=change_location_parent">Change Location Parents</a></li>
            <li><a href="?action=changes_log">Search Changes Log</a></li>              
          </ul>
        </li>        
      </ul>
      <form class="navbar-form navbar-left" onsubmit="top_bar_submit();return false;">
        <div class="form-group">
          <input type="text" class="form-control" id="top_value_search" placeholder="Appraisal ID">
        </div>
        <button type="submit"  class="btn btn-default">Open</button>
      </form>
      <ul class="nav navbar-nav navbar-right">
        <li><a href="/tandem/logout">Logout</a></li>        
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dev <span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><a href="?action=table_data">Table Search</a></li>                                                   
            <li><a href="?action=search_table_has_column">Dev - Columns Look Up</a></li> 
          </ul>
        </li>        
      </ul>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>

        ';
        $str = <<<EOF
    
    <script>
        function top_bar_submit() {
            var appraisal_id=$("#top_value_search").val();
            window.open("/tandem/appraisal-details/?showHeader=true&appraisal_id=" + appraisal_id,"w" + appraisal_id);
        }
    </script>
EOF;
        echo $str;
    }


}
